FROM nvidia/cuda:13.0.1-cudnn-devel-ubuntu24.04 AS base-builder

ENV SCCACHE=0.10.0
ENV RUSTC_WRAPPER=/usr/local/bin/sccache
ENV PATH="/root/.cargo/bin:${PATH}"
# aligned with `cargo-chef` version in `lukemathwalker/cargo-chef:latest-rust-1.85-bookworm`
ENV CARGO_CHEF=0.1.71
ENV RUST_MIN_STACK=16777216

# allow disabling sccache when cross-building under QEMU
ARG DISABLE_SCCACHE=0

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    curl \
    libssl-dev \
    pkg-config \
    python3 \
    && rm -rf /var/lib/apt/lists/*

# Donwload and configure sccache
RUN curl -fsSL https://github.com/mozilla/sccache/releases/download/v$SCCACHE/sccache-v$SCCACHE-x86_64-unknown-linux-musl.tar.gz | tar -xzv --strip-components=1 -C /usr/local/bin sccache-v$SCCACHE-x86_64-unknown-linux-musl/sccache && \
    chmod +x /usr/local/bin/sccache

RUN if [ "${DISABLE_SCCACHE}" = "1" ]; then \
        apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends cargo rustc && rm -rf /var/lib/apt/lists/*; \
    else \
        curl https://sh.rustup.rs -sSf | bash -s -- -y; \
    fi
RUN if [ "${DISABLE_SCCACHE}" = "1" ]; then \
        RUSTC_WRAPPER= cargo install cargo-chef --version $CARGO_CHEF --locked; \
    else \
        cargo install cargo-chef --version $CARGO_CHEF --locked; \
    fi

FROM base-builder AS planner

WORKDIR /usr/src

COPY backends backends
COPY core core
COPY router router
COPY Cargo.toml ./
COPY Cargo.lock ./

RUN if [ "${DISABLE_SCCACHE}" = "1" ]; then \
        RUSTC_WRAPPER= cargo chef prepare --recipe-path recipe.json; \
    else \
        cargo chef prepare --recipe-path recipe.json; \
    fi

FROM base-builder AS builder

ARG CUDA_COMPUTE_CAP=120
ARG GIT_SHA
ARG DOCKER_LABEL

# Limit parallelism
ARG RAYON_NUM_THREADS
ARG CARGO_BUILD_JOBS
ARG CARGO_BUILD_INCREMENTAL

# sccache specific variables
ARG SCCACHE_GHA_ENABLED

WORKDIR /usr/src

RUN --mount=type=secret,id=actions_results_url,env=ACTIONS_RESULTS_URL \
    --mount=type=secret,id=actions_runtime_token,env=ACTIONS_RUNTIME_TOKEN \
    if [ ${CUDA_COMPUTE_CAP} -ge 75 -a ${CUDA_COMPUTE_CAP} -lt 80 ]; \
    then  \
        nvprune --generate-code code=sm_${CUDA_COMPUTE_CAP} /usr/local/cuda/lib64/libcublas_static.a -o /usr/local/cuda/lib64/libcublas_static.a; \
    elif [ ${CUDA_COMPUTE_CAP} -ge 80 -a ${CUDA_COMPUTE_CAP} -lt 90 ]; \
    then  \
        nvprune --generate-code code=sm_80 --generate-code code=sm_${CUDA_COMPUTE_CAP} /usr/local/cuda/lib64/libcublas_static.a -o /usr/local/cuda/lib64/libcublas_static.a; \
    elif [ ${CUDA_COMPUTE_CAP} -eq 90 ]; \
    then  \
        nvprune --generate-code code=sm_90 /usr/local/cuda/lib64/libcublas_static.a -o /usr/local/cuda/lib64/libcublas_static.a; \
    elif [ ${CUDA_COMPUTE_CAP} -eq 120 ]; \
    then  \
        nvprune --generate-code code=sm_${CUDA_COMPUTE_CAP} /usr/local/cuda/lib64/libcublas_static.a -o /usr/local/cuda/lib64/libcublas_static.a; \ 
    else  \
        echo "cuda compute cap ${CUDA_COMPUTE_CAP} is not supported"; exit 1; \
    fi;

COPY --from=planner /usr/src/recipe.json recipe.json
COPY backends backends
COPY core core
COPY router router
COPY Cargo.toml ./
COPY Cargo.lock ./

# Prefetch dependencies and patch CUTLASS headers to include CUDA driver definitions.
RUN cargo fetch --locked && \
    python3 - <<'PY'
from pathlib import Path
import os

cargo_home = Path(os.environ.get('CARGO_HOME', Path.home() / '.cargo'))
git_checkouts = cargo_home / 'git' / 'checkouts'
registry_src = cargo_home / 'registry' / 'src'

paths = git_checkouts

cutlass_patched = 0
for header in paths.glob('candle-*/**/cutlass/include/cutlass/cuda_host_adapter.hpp'):
    text = header.read_text()
    if '#include <cuda.h>' not in text:
        header.write_text(text.replace('#include <cuda_runtime_api.h>', '#include <cuda.h>\n#include <cuda_runtime_api.h>', 1))
        cutlass_patched += 1

print(f"Patched {cutlass_patched} CUTLASS headers")
if cutlass_patched == 0:
    raise SystemExit('No cuda_host_adapter.hpp files patched; CUDA 13 build may fail')

cudarc_patched = 0
for cargo_toml in paths.glob('candle-*/**/Cargo.toml'):
    text = cargo_toml.read_text()
    if 'cudarc' not in text:
        continue
    original = text
    for pattern in ['    "dynamic-linking",\n', '    "dynamic-linking",', '"dynamic-linking",\n', '"dynamic-linking",']:
        text = text.replace(pattern, '')
    if '"static-linking"' not in text:
        text = text.replace('    "cuda-version-from-build-system",\n', '    "cuda-version-from-build-system",\n    "static-linking",\n')
    if text != original:
        cargo_toml.write_text(text)
        cudarc_patched += 1

print(f"Patched {cudarc_patched} Candle Cargo.toml files for cudarc static linking")
remaining_dynamic = []
for cargo_toml in paths.glob('candle-*/**/Cargo.toml'):
    text = cargo_toml.read_text()
    if 'cudarc' in text and 'dynamic-linking' in text:
        remaining_dynamic.append(str(cargo_toml))
if remaining_dynamic:
    raise SystemExit('dynamic-linking still present in: ' + ', '.join(remaining_dynamic))

cudarc_builds = list(registry_src.glob('*/*/cudarc-0.17.3/build.rs'))
if not cudarc_builds:
    raise SystemExit('cudarc build.rs files not found under ' + str(registry_src))
for build_rs in cudarc_builds:
    text = build_rs.read_text()
    text = text.replace(
        '#[cfg(all(feature = "dynamic-linking", feature = "static-linking"))]\n    panic!("Both `dynamic-linking` and `static-linking` features are active, this is a bug");',
        '#[cfg(all(feature = "dynamic-linking", feature = "static-linking"))]\n    println!("cargo:warning=Both `dynamic-linking` and `static-linking` enabled; forcing static linking");'
    )
    text = text.replace(
        '#[cfg(feature = "dynamic-linking")]\ndynamic_linking(major, minor);',
        '#[cfg(all(feature = "dynamic-linking", not(feature = "static-linking")))]\ndynamic_linking(major, minor);'
    )
    build_rs.write_text(text)

print(f"Patched {len(cudarc_builds)} cudarc build.rs files to prefer static linking")
PY

RUN --mount=type=secret,id=actions_results_url,env=ACTIONS_RESULTS_URL \
    --mount=type=secret,id=actions_runtime_token,env=ACTIONS_RUNTIME_TOKEN \
    if [ ${CUDA_COMPUTE_CAP} -ge 75 -a ${CUDA_COMPUTE_CAP} -lt 80 ]; \
    then \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo chef cook --release --features candle-cuda-turing --features static-linking --no-default-features --recipe-path recipe.json; \
        else \
            cargo chef cook --release --features candle-cuda-turing --features static-linking --no-default-features --recipe-path recipe.json && sccache -s; \
        fi; \
    elif [ ${CUDA_COMPUTE_CAP} -eq 120 ]; \
    then \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo chef cook --release --features candle-cuda --features static-linking --no-default-features --recipe-path recipe.json; \
        else \
            cargo chef cook --release --features candle-cuda --features static-linking --no-default-features --recipe-path recipe.json && sccache -s; \
        fi; \
    else \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo chef cook --release --features candle-cuda --features static-linking --no-default-features --recipe-path recipe.json; \
        else \
            cargo chef cook --release --features candle-cuda --features static-linking --no-default-features --recipe-path recipe.json && sccache -s; \
        fi; \
    fi;


FROM builder AS http-builder

RUN --mount=type=secret,id=actions_results_url,env=ACTIONS_RESULTS_URL \
    --mount=type=secret,id=actions_runtime_token,env=ACTIONS_RUNTIME_TOKEN \
    if [ ${CUDA_COMPUTE_CAP} -ge 75 -a ${CUDA_COMPUTE_CAP} -lt 80 ]; \
    then \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo build --release --bin text-embeddings-router -F candle-cuda-turing -F static-linking -F http --no-default-features; \
        else \
            cargo build --release --bin text-embeddings-router -F candle-cuda-turing -F static-linking -F http --no-default-features && sccache -s; \
        fi; \
    elif [ ${CUDA_COMPUTE_CAP} -eq 120 ]; \
    then \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F http --no-default-features; \
        else \
            cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F http --no-default-features && sccache -s; \
        fi; \
    else \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F http --no-default-features; \
        else \
            cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F http --no-default-features && sccache -s; \
        fi; \
    fi;

FROM builder AS grpc-builder

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    unzip \
    && rm -rf /var/lib/apt/lists/*

RUN PROTOC_ZIP=protoc-21.12-linux-x86_64.zip && \
    curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/$PROTOC_ZIP && \
    unzip -o $PROTOC_ZIP -d /usr/local bin/protoc && \
    unzip -o $PROTOC_ZIP -d /usr/local 'include/*' && \
    rm -f $PROTOC_ZIP

COPY proto proto

RUN --mount=type=secret,id=actions_results_url,env=ACTIONS_RESULTS_URL \
    --mount=type=secret,id=actions_runtime_token,env=ACTIONS_RUNTIME_TOKEN \
    if [ ${CUDA_COMPUTE_CAP} -ge 75 -a ${CUDA_COMPUTE_CAP} -lt 80 ]; \
    then \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo build --release --bin text-embeddings-router -F candle-cuda-turing -F static-linking -F grpc --no-default-features; \
        else \
            cargo build --release --bin text-embeddings-router -F candle-cuda-turing -F static-linking -F grpc --no-default-features && sccache -s; \
        fi; \
    elif [ ${CUDA_COMPUTE_CAP} -eq 120 ]; \
    then \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F grpc --no-default-features; \
        else \
            cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F grpc --no-default-features && sccache -s; \
        fi; \
    else \
        if [ "${DISABLE_SCCACHE}" = "1" ]; then \
            RUSTC_WRAPPER= cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F grpc --no-default-features; \
        else \
            cargo build --release --bin text-embeddings-router -F candle-cuda -F static-linking -F grpc --no-default-features && sccache -s; \
        fi; \
    fi;

FROM nvidia/cuda:13.0.1-cudnn-devel-ubuntu24.04 AS base

ENV HUGGINGFACE_HUB_CACHE=/data \
    PORT=80 \
    USE_FLASH_ATTENTION=True

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

FROM base AS grpc

COPY --from=grpc-builder /usr/src/target/release/text-embeddings-router /usr/local/bin/text-embeddings-router

ENTRYPOINT ["text-embeddings-router"]
CMD ["--json-output"]

FROM base

COPY --from=http-builder /usr/src/target/release/text-embeddings-router /usr/local/bin/text-embeddings-router

ENTRYPOINT ["text-embeddings-router"]
CMD ["--json-output"]
